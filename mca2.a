;ACME 0.96.2
; Name		mca2
; Purpose	multiple choice adventure 2
; Author	(c) Marco Baye, 2017
; Licence	Free software
; Changes:
;  3 Sep 2016	First try, posted to forum64
;  4 Sep 2016	added some comments and shaved off a byte
; 24 Jun 2017	started work to convert from original mca to mca2
; 26 Jun 2017	got it to work

	!src <6502/std.a>	; for +bit16
	;!ct pet	; disabled, strings are now in UTF8

	DEUTSCH	= 1;0	; set to nonzero to make engine use german texts

; helper values
	MODIFIED8	= $ff

; system memory
!addr	is_PAL		= $02a6	; zero for NTSC, nonzero for PAL

; basic header
	* = $0801
		!wo line2, 2017
		!by $9e, $20	; "sys "
		!by '0' + entry % 10000 / 1000
		!by '0' + entry %  1000 /  100
		!by '0' + entry %   100 /   10
		!by '0' + entry %    10
		!pet $3a, $8f, " saufbox!", $0	; ":rem "
line2		!wo 0


xor_border ; this is used by the example program
		lda addr($d020)
		eor #15
		sta addr($d020)
		rts

wait_A_tenths ; wait for the number of .1 seconds given in A
		; convert .1s unit to frames:
		;	for PAL (50Hz), multiply by 5 (4+1)
		;	for NTSC (60Hz), multiply by 6 (4+1+1)
		sta .tenths
		asl	; *2
		asl	; *4
		clc
		adc #MODIFIED8	: .tenths = * - 1	; *5
		; for NTSC, add another time
		ldx is_PAL
		bne +
			clc
			adc .tenths	; *6
+		;FALLTHROUGH
wait_A_frames ; wait for the number of frames given in A
		tax
---
-			lda vic_controlv
			bpl -
		txa	; check for early exit (if called with A zero)
		beq +	; early exit
-			lda vic_controlv
			bmi -
		dex
		bne ---
+		rts

; main program
entry ; entry point for SYS
		; init
		cld
		tsx
		stx sp_buffer
		; FIXME - fadeout!
		lda #0
		sta vic_cborder
		sta vic_cbg
		jsr output_init
		; FIXME - fade in!
		jsr my_primm
!if DEUTSCH {
		!tx "Willkommen zu ", cr, '"', "Multiple Choice Adventure 2", '"', "!"
} else {
		!tx "Welcome to Multiple Choice Adventure 2!"
}
		!tx cr, 0
		jmp engine_new_location

;internal_error	jsr my_primm
;		!tx "Internal error!", CR, 0
exit		ldx #MODIFIED8	: sp_buffer = * - 1
		txs
		rts

pre_situation ; called before a new situation (to clear screen?)
		; make some space
		jsr my_primm	: !tx petscii_CLEAR, 0	; was: CR, CR, 0
		rts

prompt_for_action ; ask user. returns chosen location in YYAA
		jsr my_primm	: !tx CR, ">", 0
		; ask user for input
---			lda #'?'
			jsr my_chrout
			; wait for valid input
-				jsr k_getin
				beq -
			ldx #6
--				cmp direction_keys - 1, x
				beq .dir_x
				dex
				bne --
			beq ---
			;---
.dir_x			lda directions_hi - 1, x
			beq ---
		tay
		lda directions_lo - 1, x
		rts	; return YYAA as new location

!if DEUTSCH {
direction_keys	!pet "nswohr"	; FIXME - still needed?
} else {
direction_keys	!pet "nsweud"	; FIXME - still needed?
}
