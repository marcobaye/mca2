;ACME 0.96.2
; Name		mca2
; Purpose	multiple choice adventure 2
; Author	(c) Marco Baye, 2017
; Licence	Free software
; Changes:
;  3 Sep 2016	First try, posted to forum64
;  4 Sep 2016	added some comments and shaved off a byte
; 24 Jun 2017	started work to convert from original mca to mca2
; 26 Jun 2017	got it to work

	!src <6502/std.a>	; for +bit16
	;!ct pet	; disabled, strings are now in UTF8

	DEUTSCH	= 1;0	; set to nonzero to make engine use german texts

; helper values
	MODIFIED8	= $ff

; system memory
!addr	is_PAL		= $02a6	; zero for NTSC, nonzero for PAL

; basic header
	* = $0801
		!wo line2, 2017
		!by $9e, $20	; "sys "
		!by '0' + entry % 10000 / 1000
		!by '0' + entry %  1000 /  100
		!by '0' + entry %   100 /   10
		!by '0' + entry %    10
		!pet $3a, $8f, " saufbox!", $0	; ":rem "
line2		!wo 0


xor_border ; this is used by the example program
		lda addr($d020)
		eor #15
		sta addr($d020)
		rts

wait_A_tenths ; wait for the number of .1 seconds given in A
		; convert .1s unit to frames:
		;	for PAL (50Hz), multiply by 5 (4+1)
		;	for NTSC (60Hz), multiply by 6 (4+1+1)
		sta .tenths
		asl	; *2
		asl	; *4
		clc
		adc #MODIFIED8	: .tenths = * - 1	; *5
		; for NTSC, add another time
		ldx is_PAL
		bne +
			clc
			adc .tenths	; *6
+		;FALLTHROUGH
wait_A_frames ; wait for the number of frames given in A
		tax
---
-			lda vic_controlv
			bpl -
		txa	; check for early exit (if called with A zero)
		beq +	; early exit
-			lda vic_controlv
			bmi -
		dex
		bne ---
+		rts

get_key ; wait for user to press key
---			jsr k_getin
			beq ---
		rts

; main program
entry ; entry point for SYS
		; init
		cld
		tsx
		stx sp_buffer
		; FIXME - fadeout!
		lda #0
		sta vic_cborder
		sta vic_cbg
		jsr output_init
		; FIXME - fade in!
		jsr my_primm
!if DEUTSCH {
		!tx "Willkommen zu ", cr, '"', "Multiple Choice Adventure 2", '"', "!", cr, cr
		!tx "Bitte eine Taste..."
} else {
		!tx "Welcome to Multiple Choice Adventure 2!", cr, cr
		!tx "Press any key..."
}
		!tx 0
		jsr get_key
; now enter actual main loop:
---		jsr engine_new_location	; includes "restart" etc.
		; now wait for command
.get			jsr get_key
			ldx #0
--				cmp keys_start, x
				beq .found
				inx
				cpx #keys_end - keys_start
				bne --
			jsr my_primm
!if DEUTSCH {	!tx "(falsche Taste, dr", in_ü, "ck '?' f", in_ü, "r Hilfe)", cr, 0
} else {	!tx "(wrong key, press '?' for help)", cr, 0 }
			jmp .get
.found ; call action handler
		lda action_lo, x
		sta .call
		lda action_hi, x
		sta .call + 1
		jsr MODIFIED16	: .call = * - 2
		jmp .get


help ; "?" command
		jsr my_primm
!if DEUTSCH {	!tx cr, "M", in_ö, "gliche Befehle:", cr, color_LGREEN
		!tx "  Nord S", in_ü, "d West Ost Hoch Runter", cr
		!tx "  Inventar Grabsch Verliere", cr
		!tx "  Untersuche Benutze", cr, color_GREEN
		!tx "Immer nur den ersten Buchstaben tippen!", cr
		!tx "CLR/HOME baut den Bildschirm neu auf.", cr
} else {	!tx "Allowed commands:", cr
		!tx "  North South West East Up Down", cr
		!error "Inventory Take Lose", cr
		!error "Examine Use", cr
		!tx "Type the first character only!", cr
		!tx "CLR/HOME will redisplay the screen.", cr
}
		!tx 0
		rts

keys_start
!if DEUTSCH {	!pet petscii_CLEAR, petscii_HOME, "?nswohrigvub"
} else {	!pet petscii_CLEAR, petscii_HOME, "?nsweuditdEU"	}
keys_end

action_lo	!by <redisp, <redisp, <help, <go_n, <go_s, <go_w, <go_e, <go_u, <go_d, <inventory, <take, <drop, <examine, <use
action_hi	!by >redisp, >redisp, >help, >go_n, >go_s, >go_w, >go_e, >go_u, >go_d, >inventory, >take, >drop, >examine, >use

	redisp = engine_new_location

; direction commands
go_n		ldx #offset_NORTH
		+bit16
go_s		ldx #offset_SOUTH
		+bit16
go_w		ldx #offset_WEST
		+bit16
go_e		ldx #offset_EAST
		+bit16
go_u		ldx #offset_UP
		+bit16
go_d		ldx #offset_DOWN
		lda directions_hi, x
		beq .illegal
		tay
		lda directions_lo, x
		sty gamevars_hi + vo_PLAYER
		sta gamevars_lo + vo_PLAYER
		jmp engine_new_location
.illegal ; player chose an illegal direction
		jsr my_primm
!if DEUTSCH {	!tx "Richtung nicht m", in_ö, "glich, bitte eine andere w", in_ä, "hlen.", cr, 0
} else {	!tx "Illegal direction, please choose another.", cr, 0	}
		rts

inventory ; "inventory" command
		jsr my_primm
!if DEUTSCH {	!tx "Dinge im Inventar:", cr, 0
} else {	!tx "Things in inventory:", cr, 0	}
		ldy #>location_INVENTORY
		lda #<location_INVENTORY
		jsr itemlist_at_YYAA	; returns number in Y, A and Z ;)
		jmp itemlist_list

take ; "take" command
		jsr my_primm
!if DEUTSCH {	!tx "Grabsch:", cr, 0
} else {	!tx "Take:", cr, 0	}
		ldy gamevars_hi + vo_PLAYER
		lda gamevars_lo + vo_PLAYER
		jsr itemlist_at_YYAA	; returns number in Y, A and Z ;)
		bne +
			jsr my_primm
!if DEUTSCH {		!tx " Nichts da zum Grabschen!", cr, 0
} else {		!tx " There is nothing to take!", cr, 0	}
			rts
+		ldx #1	; yes, do size checking
		jsr itemlist_numbered	; returns limit (first illegal) character
		jsr select	; returns status in C and maybe index in X
		bcs .no_take
		; check size
		lda item_weight, x
		bmi .too_large
		; take: set item's location to INVENTORY
		lda #>location_INVENTORY
		sta gamevars_hi, x
		lda #<location_INVENTORY
		sta gamevars_lo, x
		jsr my_primm
!if DEUTSCH {	!tx " - ok, gegrabscht!", cr, 0
} else {	!tx " - ok, took it!", cr, 0	}
		rts

.too_large	jsr my_primm
!if DEUTSCH {	!tx " - nein, das kann man nicht mitnehmen!", cr, 0
} else {	!tx " - no, you cannot take that with you!", cr, 0	}
		rts

.no_take	jsr my_primm
!if DEUTSCH {	!tx " - nichts gegrabscht!", cr, 0
} else {	!tx " - nothing taken!", cr, 0	}
		rts

drop ; "drop" command
		jsr my_primm
!if DEUTSCH {	!tx "Verliere:", cr, 0
} else {	!tx "Drop:", cr, 0	}
		ldy #>location_INVENTORY
		lda #<location_INVENTORY
		jsr itemlist_at_YYAA	; returns number in Y, A and Z ;)
		bne +
			jsr my_primm
!if DEUTSCH {		!tx " Nichts da zum Verlieren!", cr, 0
} else {		!tx " There is nothing to drop!", cr, 0	}
			rts
+		ldx #0	; no size check
		jsr itemlist_numbered	; returns limit (first illegal) character
		jsr select	; returns status in C and maybe index in X
		bcs .no_drop
		; drop: copy player's location to item's location
		lda gamevars_hi + vo_PLAYER
		sta gamevars_hi, x
		lda gamevars_lo + vo_PLAYER
		sta gamevars_lo, x
		jsr my_primm
!if DEUTSCH {	!tx " - ok, verloren!", cr, 0
} else {	!tx " - ok, dropped it!", cr, 0	}
		rts

.no_drop	jsr my_primm
!if DEUTSCH {	!tx " - nichts verloren!", cr, 0
} else {	!tx " - nothing dropped!", cr, 0	}
		rts

examine ; "examine" command
		jsr my_primm
!if DEUTSCH {	!tx "Untersuche:", cr, 0
} else {	!tx "Examine:", cr, 0	}
		; get list of items at location
		ldy gamevars_hi + vo_PLAYER
		lda gamevars_lo + vo_PLAYER
		jsr itemlist_at_YYAA	; returns number in Y, A and Z ;)
		; extend list with items in inventory
		tax
		ldy #>location_INVENTORY
		lda #<location_INVENTORY
		jsr itemlist_plus_at_YYAA	; returns number in Y, A and Z ;)
		bne +
			jsr my_primm
!if DEUTSCH {		!tx " Nichts da zum Untersuchen!", cr, 0
} else {		!tx " There is nothing to examine!", cr, 0	}
			rts
+		ldx #0	; no size check
		jsr itemlist_numbered	; returns limit (first illegal) character
		jsr select	; returns status in C and maybe index in X
		bcs .no_examine
		; examine: display item's description string
		jsr my_primm	: !tx ":", cr, " ", color_LGREEN, 0
		ldy item_desc_lo, x
		lda item_desc_hi, x
		jsr print_AAYY
		jsr my_primm	: !tx color_GREEN, cr, 0
		rts

.no_examine	jsr my_primm
!if DEUTSCH {	!tx " - nichts untersucht!", cr, 0
} else {	!tx " - nothing examined!", cr, 0	}
		rts

use ; "use" command
		jsr my_primm
!if DEUTSCH {	!tx "Benutze:", cr, 0
} else {	!tx "Use:", cr, 0	}
		; get list of items in inventory
		ldy #>location_INVENTORY
		lda #<location_INVENTORY
		jsr itemlist_at_YYAA	; returns number in Y, A and Z ;)
		; extend list with items at location
		tax
		ldy gamevars_hi + vo_PLAYER
		lda gamevars_lo + vo_PLAYER
		jsr itemlist_plus_at_YYAA	; returns number in Y, A and Z ;)
		bne +
			jsr my_primm
!if DEUTSCH {		!tx " Nichts da zum Benutzen!", cr, 0
} else {		!tx " There is nothing to use!", cr, 0	}
			rts
+		sta .length	; remember number of items
		; choose first item
		ldx #0	; no size check
		jsr itemlist_numbered	; returns limit (first illegal) character
		jsr select	; returns status in C and maybe index in X
		bcs .no_use
		stx .hinz
		; choose second item
		jsr my_primm
!if DEUTSCH {	!tx " mit:", cr, 0
} else {	!tx " with:", cr, 0	}
		lda #MODIFIED8	: .length = * - 1
		ldx #0	; no size check
		jsr itemlist_numbered	; returns limit (first illegal) character
		jsr select	; returns status in C and maybe index in X
		bcs .no_use
		;stx .kunz
		lda #MODIFIED8	: .hinz = * - 1
		; use: call engine with both items
		jsr engine_use_A_with_X
		bcc +
			jsr my_primm
!if DEUTSCH {		!tx " - das geht nicht!", cr, 0
} else {		!tx " - that does not work!", cr, 0	}
+		rts

.no_use		jsr my_primm
!if DEUTSCH {	!tx " - nichts benutzt!", cr, 0
} else {	!tx " - nothing used!", cr, 0	}
		rts


!zone
select ; ask user to select one of the items in the current list (A must be first illegal char)
		sta .limit
		jsr get_key
		cmp #'1'
		bcc .illegal_key
		cmp #MODIFIED8	: .limit = * - 1
		bcs .illegal_key
		pha
		jsr k_chrout	; yes, KERNAL out - because input characters are petscii
		pla
		; convert digit to list offset
		sec
		sbc #'1'
		; convert list offset to item offset
		tax
		lda itemlist, x
		tax
		; return result
		clc	; ok
		rts
.illegal_key	sec	; fail
		rts

!zone
;internal_error	jsr my_primm
;		!tx "Internal error!", CR, 0
exit		ldx #MODIFIED8	: sp_buffer = * - 1
		txs
		rts

pre_situation ; called before a new situation (to clear screen?)
		; make some space
		jsr my_primm	: !tx petscii_CLEAR, petscii_REVSON, 0
		; invert first line for title
		ldx #39
		lda #160
--			sta SCREEN, x
			dex
			bpl --
		rts
