;ACME 0.96.2

	!src <cbm/petscii.a>
	petscii_LOWERCASE	=  14	; switch to lowercase/uppercase character set
	petscii_F1	= 133:	petscii_F2	= 137
	petscii_F3	= 134:	petscii_F4	= 138
	petscii_F5	= 135:	petscii_F6	= 139
	petscii_F7	= 136:	petscii_F8	= 140

; helper values
	CR		= sys_NEWLINE
	cr		= sys_NEWLINE
	colorbase	= $b0	; b0..bf
!if UTF8 {
	UTF8IGNORE	= $c2	; prefix byte for 0x80..0xbf
	UTF8CONVERT	= $c3	; prefix byte to convert 0x80..0xbf to 0xc0..0xff
}
	Ä		= $c4
	Ö		= $d6
	Ü		= $dc
	ß		= $df
	ä		= $e4
	ö		= $f6
	ü		= $fc

;ISO encodes as 0xc0 .. 0xdf,
;UTF8 encodes as 0xc3 0x80 .. 0xc3 0x9f:
;	ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞß	
;ISO encodes as 0xe0 .. 0xff,
;UTF8 encodes as 0xc3 0xa0 .. 0xc3 0xbf:
;	àáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ	XOR 1!

;ISO: 80..af ignore, b0..bf colors, c0..df down, e0..ff xor1
;UTF8: 80..9f down, a0..bf xor1, c0..ef ignore, f0..ff colors

; wrapper for CHROUT (to handle UTF8 and color codes etc)
my_chrout ; must keep X/Y!
		cmp #$80
		bcs +
			jmp wordwrapped	; 00..7f are handled right away
+
!if UTF8 {
		; "convert" flag set?
		bit utf8conv
		bpl +
			lsr utf8conv	; clear flag
			ora #$40	; convert
+		cmp #UTF8IGNORE
		beq .rts
		cmp #UTF8CONVERT
		bne +
			sec		; set flag
			ror utf8conv
			rts
utf8conv	!by $00
+
}
		cmp #$e0
		bcs .xor1
		cmp #$c0
		bcs .down
		cmp #colorbase
		bcs .setcolor
		cmp #$a0
		bcc +
			lda #$7f	; map to last, unused character
+		; 80..9f are handled as control codes to get CLEAR to work
		jmp wordwrapped	; get CLEAR to work

.setcolor ; handle own color codes ($bX)
		; set color
		pha
		lda #0	; output dummy code to flush buffer
		jsr wordwrapped
		pla
		+arch_set_text_color_A
.rts		rts

.xor1		eor #1
		;FALLTHROUGH
.down		ora #%###.....	; make sure arch macro can recognize them
		jmp wordwrap_printable

; print immediate
my_primm	pla	; get low byte of return address - 1
		tay	; into Y
		pla	; get high byte of return address - 1
		sta .primm_ptr + 1	; to ptr high
		jmp +
---			jsr my_chrout
+			iny
			bne +
				inc .primm_ptr + 1	; fix high byte
+			lda MODIFIED16 & $ff00, y	: .primm_ptr = * - 2	; low byte stays zero!
			bne ---
		; push updated address onto stack
		lda .primm_ptr + 1
		pha
		tya
		pha
		rts	; return to caller (after zero-terminated text)


print_AAYY ; print zero-terminated string. keeps X.
		sta .print_ptr + 1
		jmp +
---			jsr my_chrout
			iny
			bne +
				inc .print_ptr + 1	; fix high byte
+			lda MODIFIED16 & $ff00, y	: .print_ptr = * - 2	; low byte stays zero!
			bne ---
		rts

; word wrap:
.xbuf		!by 0
.space_left	!by LINE_LENGTH
.chars_in_buf	!by 0
.indents	!by 0
indent0		lda #0
		+bit16
indent1		lda #1
		sta .indents
		rts
wordwrapped ; output character with automatic word wrap. KEEPS X/Y!
		cmp #$21	; low control codes and space flush buffer
		bcc .control_or_space
		cmp #$80	; printables with msb clear?
		bcc wordwrap_printable
		cmp #$a0	; high control codes flush buffer (shift space could be used as nbsp)
		bcc .control_hi
		; printables with msb set
wordwrap_printable ; append to buffer
		stx .xbuf
		ldx .chars_in_buf
		sta linebuf, x
		cpx #LINE_LENGTH	; buffer overrun? (old value!)
		bne .end_append
			; buffer overran, so fuck the word wrap, just output it
			; "chars_left" does not change in this case!
			jsr linebuf_flush
			; and move the new character to start of buf
			lda linebuf + LINE_LENGTH
			sta linebuf
.end_append	inc .chars_in_buf
		ldx .xbuf
		rts

.control_or_space
		cmp #' '
		beq .space
		cmp #cr
		beq .cr
		cmp #petscii_HOME
		beq .home
.control_hi ; A is separator code, so flush contents of buffer, then output A
		cmp #petscii_CLEAR
		beq .clear
.control	pha
		stx .xbuf

		; does buffer fit in current line?
		lda .space_left
		cmp .chars_in_buf
		bcs +
			; too little space on line, so do wrap
			; first force carriage return
			lda #cr
			jsr sys_chrout
			jsr .new_line

			lda .space_left
			cmp .chars_in_buf
+		bne .small
			; fits exactly
			jsr linebuf_flush
			jsr .new_line

			ldx .xbuf
			pla
			jsr sys_chrout
			sec	; next space could be skipped
			rts

.small		lda .space_left
		sec
		sbc .chars_in_buf
		sta .space_left
		jsr linebuf_flush

		ldx .xbuf
		pla
		jsr sys_chrout
		clc	; ok
		rts

.new_line	lda #LINE_LENGTH	; next line is completely unused
		sta .space_left
		ldx .indents
		beq +
			lda #' '
			jsr sys_chrout
			dec .space_left
+		rts

.space ; code is space
		lda #0	; output dummy code instead
		jsr .control
		bcs +
			; space must be output
			lda #' '
			jsr sys_chrout
			dec .space_left
			bne +
				jsr .new_line
+		rts

.home
.clear
.cr		jsr .control
		lda #LINE_LENGTH
		sta .space_left
		rts

linebuf_flush ; output what's in the line buffer
		ldx #0
		beq +
		;--
---			lda linebuf, x
			jsr sys_chrout
			lda #0
			sta z_quote_mode
			inx
+			cpx .chars_in_buf
			bne ---
		ldx #0
		stx .chars_in_buf
		rts
