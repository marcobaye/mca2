#!/usr/bin/python2
import sys

class convertor(object):
	"""converts MCA source to ACME source"""

	def __init__(self):
		self.line_number = 0	# for error output
		self.text_mode = False	# needed to add command prefix and trailing NUL char
		self.in_sit = False	# needed so no command is issued outside of situation
		self.vars = []	# list of declared variables (including fakes for literals)
		self.situations = []	# list of actual "code" lines
		# FIXME - add dicts for "referenced situations" and "referenced vars"
		#self.label_count = 0	# for generating "goto" labels for if/else

	def src_error(self, msg):
		print >> sys.stderr, "Error in line %d: %s!" % (self.line_number, msg)
		sys.exit(1)

	def output(self):
		print ';ACME0.96.2'
		print ';'
		print '; DO NOT EDIT THIS FILE! THIS FILE IS AUTOMATICALLY GENERATED!'
		print ';'
		for v in self.vars:
			print v
		for line in self.situations:
			print line
		print ';end of auto-generated file'
		# FIXME - compare "referenced situations" and "referenced vars" to actual lists!
		
	def preprocess(self, line_in):
		"""count and remove indentation characters, remove comments"""
		indents = 1	# leading prefix for binary space/tab pattern
		count_indents = True
		quotes = None
		line_out = ''
		for char in line_in:
			# count indentation
			if count_indents:
				if char == ' ':
					indents <<= 1
					continue;
				elif char == '\t':
					indents = (indents << 1) + 1
					continue;
				else:
					count_indents = False
			# do not change anything inside strings
			if char == quotes:
				quotes = None	# found end of quotes
			elif char == '"' or char == "'":
				quotes = char
				line_out += char
				continue	# do not remove '#' in strings
			if quotes == None and char == '#':
				break	# remove comment
			line_out += char
		if quotes != None:
			self.src_error("quotes still open at end of line")
		return indents, line_out

	def process_line(self, line):
		"""process a single line of input"""
		self.line_number += 1
		indents, line = self.preprocess(line)
		if line == '':
			return
		self.situations.append(str(indents) + line)

	def parse_file(self, filename):
		with open(filename, 'r') as file:
			for line in file:
				if line[-1] == '\n':
					line = line[:-1]
				self.process_line(line)

def main():
	if len(sys.argv) != 2:
		print >> sys.stderr, 'Error: wrong number of arguments'
		sys.exit(1)
	source_file = sys.argv[1]
	conv = convertor()
	conv.parse_file(source_file)
	conv.output()

if __name__ == '__main__':
	main()
